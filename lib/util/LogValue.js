(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A virtual representation of a discrete value logged to from AssemblyScript.
     */
    var LogValue = /** @class */ (function () {
        function LogValue(wasm, type, value, reference, offset, stack) {
            /**
             * If a pointer is referenced, this is the precise memory location of the referenced block of
             * data.
             */
            this.pointer = 0;
            /**
             * If a pointer is referenced and isn't a string, this is the size of the referenced block of
             * data.
             */
            this.offset = 0;
            /**
             * If a pointer is referenced and ins't a string, this is an array of bytes to be logged byt the
             * logger.
             */
            this.bytes = [];
            /**
             * This is a message generated by the TestSuite to be displayed in the logger.
             */
            this.message = "";
            /**
             * This is the relevant stack trace, filtered with the `/wasm/i` regex.
             */
            this.stack = "";
            /**
             * This is the raw logged value.
             */
            this.value = null;
            this.stack = stack;
            if (type === 5 /* Null */) {
                this.message = "null";
                this.value = null;
            }
            else if (type === 1 /* Float */) {
                this.message = value.toString();
                this.value = value;
            }
            else if (type === 2 /* Reference */) {
                this.message = "Reference Value";
                this.pointer = reference;
                this.offset = offset;
                this.bytes = Array.from(wasm.U8.slice(reference, reference + offset));
            }
            else if (type === 7 /* Truthy */) {
                this.message = "Truthy Value";
            }
            else if (type === 6 /* Falsy */) {
                this.message = "Falsy Value";
            }
            else if (type === 8 /* Finite */) {
                this.message = "Finite Value";
            }
            else if (type === 4 /* Array */) {
                this.message = "Array Value";
                this.pointer = reference;
                this.offset = offset;
                this.bytes = wasm.__getArray(reference);
            }
            else if (type === 3 /* String */) {
                this.message = wasm.__getString(reference);
                this.pointer = reference;
                this.offset = offset;
            }
            else if (type === 0 /* None */) {
                this.message = "No Value Was Expected";
            }
        }
        return LogValue;
    }());
    exports.LogValue = LogValue;
});
//# sourceMappingURL=LogValue.js.map