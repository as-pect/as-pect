// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`pass-fail output Node: !~A test outside of a describe block[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~A test outside of a describe block[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]!~should run[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: afterAllPointers 1`] = `1`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: message 1`] = `"This should fail in afterAll"`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterAll[0]: type 1`] = `1`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]!~should run[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: afterEachPointers 1`] = `1`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: message 1`] = `"This should fail in afterEach"`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~fail on group afterEach[0]: type 1`] = `1`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: ran 1`] = `false`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]!~shouldn't run[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: beforeAllPointers 1`] = `1`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: message 1`] = `"This should fail in beforeAll"`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeAll[0]: type 1`] = `1`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: ran 1`] = `false`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]!~shouldn't run[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: beforeEachPointers 1`] = `1`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: message 1`] = `"This should fail in beforeEach"`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~fail on group beforeEach[0]: type 1`] = `1`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: beforeAllPointers 1`] = `1`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]!~nested[0]: type 1`] = `1`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~nested fail in beforeAll[0]: type 1`] = `1`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]!~should run[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: afterAllPointers 1`] = `1`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterAll[0]: type 1`] = `1`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]!~should run[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: afterEachPointers 1`] = `1`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass on group afterEach[0]: type 1`] = `1`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]!~should run[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: beforeAllPointers 1`] = `1`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeAll[0]: type 1`] = `1`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]!~should run[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: beforeEachPointers 1`] = `1`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass on group beforeEach[0]: type 1`] = `1`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: actual 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 800,
  "signed": false,
  "size": 3,
  "stack": "Has Stack Trace",
  "type": 2,
  "typeId": 1,
  "typeName": "String",
  "value": "two",
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: actual-stringify 1`] = `"  string: \\"two\\""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: allocations 1`] = `11`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: decrements 1`] = `20`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: expected 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 832,
  "signed": false,
  "size": 3,
  "stack": "Has Stack Trace",
  "type": 2,
  "typeId": 1,
  "typeName": "String",
  "value": "one",
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: expected-stringify 1`] = `"  string: \\"one\\""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: frees 1`] = `10`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: increments 1`] = `21`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should expect strings[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: decrements 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: frees 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: message 1`] = `"No Message Provided."`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail when test does not throw[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: message 1`] = `"expected fail"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should fail[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: decrements 1`] = `8`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: frees 1`] = `6`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: increments 1`] = `10`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report a negated test[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 7200,
  "signed": false,
  "size": 3,
  "stack": "Has Stack Trace",
  "type": 10,
  "typeId": 7,
  "typeName": "Array<i32>",
  "value": 0,
  "values": Array [
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 4,
      "stack": "",
      "type": 7,
      "typeId": 0,
      "typeName": "i32",
      "value": 1,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 4,
      "stack": "",
      "type": 7,
      "typeId": 0,
      "typeName": "i32",
      "value": 2,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 4,
      "stack": "",
      "type": 7,
      "typeId": 0,
      "typeName": "i32",
      "value": 3,
      "values": null,
    },
  ],
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: actual-stringify 1`] = `
"  class: Array<i32> [
      number: 1,
      number: 2,
      number: 3
  ]"
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: allocations 1`] = `15`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: decrements 1`] = `38`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 7296,
  "signed": false,
  "size": 3,
  "stack": "Has Stack Trace",
  "type": 10,
  "typeId": 7,
  "typeName": "Array<i32>",
  "value": 0,
  "values": Array [
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 4,
      "stack": "",
      "type": 7,
      "typeId": 0,
      "typeName": "i32",
      "value": 4,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 4,
      "stack": "",
      "type": 7,
      "typeId": 0,
      "typeName": "i32",
      "value": 5,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 4,
      "stack": "",
      "type": 7,
      "typeId": 0,
      "typeName": "i32",
      "value": 6,
      "values": null,
    },
  ],
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: expected-stringify 1`] = `
"  class: Array<i32> [
      number: 4,
      number: 5,
      number: 6
  ]"
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: frees 1`] = `10`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: increments 1`] = `45`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report array values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 1,
  "stack": "Has Stack Trace",
  "type": 9,
  "typeId": 0,
  "typeName": "bool",
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: actual-stringify 1`] = `"  keyword: false"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: decrements 1`] = `8`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 1,
  "stack": "Has Stack Trace",
  "type": 9,
  "typeId": 0,
  "typeName": "bool",
  "value": 1,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: expected-stringify 1`] = `"  keyword: true"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: frees 1`] = `6`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report bool values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": true,
  "size": 8,
  "stack": "Has Stack Trace",
  "type": 8,
  "typeId": 0,
  "typeName": "f64",
  "value": NaN,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: actual-stringify 1`] = `"  number: NaN.0"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: allocations 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: decrements 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 0,
  "stack": "No Stack Trace",
  "type": 12,
  "typeId": 0,
  "typeName": null,
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: expected-stringify 1`] = `"Finite"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: frees 1`] = `3`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: increments 1`] = `5`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report expected finite values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: decrements 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: frees 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report f32 values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 1,
  "signed": false,
  "size": 0,
  "stack": "Has Stack Trace",
  "type": 6,
  "typeId": 13,
  "typeName": "Function",
  "value": "",
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: actual-stringify 1`] = `"  class: [Function 1: ]"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: decrements 1`] = `8`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 2,
  "signed": false,
  "size": 0,
  "stack": "Has Stack Trace",
  "type": 6,
  "typeId": 13,
  "typeName": "Function",
  "value": "",
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: expected-stringify 1`] = `"  class: [Function 2: ]"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: frees 1`] = `6`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report failed functions[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": true,
  "size": 4,
  "stack": "Has Stack Trace",
  "type": 7,
  "typeId": 0,
  "typeName": "i32",
  "value": 1,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: actual-stringify 1`] = `"  number: 1"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: allocations 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: decrements 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 0,
  "stack": "No Stack Trace",
  "type": 14,
  "typeId": 0,
  "typeName": null,
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: expected-stringify 1`] = `"Falsy"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: frees 1`] = `3`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: increments 1`] = `5`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy expected values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 1,
  "stack": "Has Stack Trace",
  "type": 9,
  "typeId": 0,
  "typeName": "bool",
  "value": 1,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: actual-stringify 1`] = `"  keyword: true"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: allocations 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: decrements 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 0,
  "stack": "No Stack Trace",
  "type": 14,
  "typeId": 0,
  "typeName": null,
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: expected-stringify 1`] = `"Falsy"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: frees 1`] = `3`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: increments 1`] = `5`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report falsy values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: allocations 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: decrements 1`] = `5`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: frees 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: increments 1`] = `5`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": true,
  "size": 8,
  "stack": "Has Stack Trace",
  "type": 8,
  "typeId": 0,
  "typeName": "f64",
  "value": NaN,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: actual-stringify 1`] = `"  number: NaN.0"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: allocations 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: decrements 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 0,
  "stack": "No Stack Trace",
  "type": 12,
  "typeId": 0,
  "typeName": null,
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: expected-stringify 1`] = `"Finite"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: frees 1`] = `3`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: increments 1`] = `5`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[1]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": true,
  "size": 8,
  "stack": "Has Stack Trace",
  "type": 8,
  "typeId": 0,
  "typeName": "f64",
  "value": 3,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: actual-stringify 1`] = `"  number: 3.0"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: allocations 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: decrements 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": true,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 0,
  "stack": "No Stack Trace",
  "type": 12,
  "typeId": 0,
  "typeName": null,
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: expected-stringify 1`] = `"Not Finite"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: frees 1`] = `3`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: increments 1`] = `6`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report finite values[2]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: decrements 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: frees 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: decrements 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: frees 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report i16 values[1]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: actual 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 3136,
  "signed": false,
  "size": 4,
  "stack": "Has Stack Trace",
  "type": 2,
  "typeId": 1,
  "typeName": "String",
  "value": "Test",
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: actual-stringify 1`] = `"  string: \\"Test\\""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: allocations 1`] = `11`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: decrements 1`] = `20`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: expected 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 3168,
  "signed": false,
  "size": 7,
  "stack": "Has Stack Trace",
  "type": 2,
  "typeId": 1,
  "typeName": "String",
  "value": "invalid",
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: expected-stringify 1`] = `"  string: \\"invalid\\""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: frees 1`] = `10`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: increments 1`] = `21`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report invalid strings[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": true,
  "size": 8,
  "stack": "Has Stack Trace",
  "type": 7,
  "typeId": 0,
  "typeName": "i64",
  "value": "-9999999999",
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: actual-stringify 1`] = `"  number: -9999999999 keyword: as class: i64"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: decrements 1`] = `8`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": true,
  "size": 8,
  "stack": "Has Stack Trace",
  "type": 7,
  "typeId": 0,
  "typeName": "i64",
  "value": "9999999999",
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: expected-stringify 1`] = `"  number: 9999999999 keyword: as class: i64"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: frees 1`] = `6`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report long values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 1,
  "stack": "Has Stack Trace",
  "type": 9,
  "typeId": 0,
  "typeName": "bool",
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: actual-stringify 1`] = `"  keyword: false"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: allocations 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: decrements 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": true,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 0,
  "stack": "No Stack Trace",
  "type": 14,
  "typeId": 0,
  "typeName": null,
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: expected-stringify 1`] = `"Not Falsy"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: frees 1`] = `3`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: increments 1`] = `6`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not falsy values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 1,
  "stack": "Has Stack Trace",
  "type": 9,
  "typeId": 0,
  "typeName": "bool",
  "value": 1,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: actual-stringify 1`] = `"  keyword: true"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: allocations 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: decrements 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": true,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 0,
  "stack": "No Stack Trace",
  "type": 13,
  "typeId": 0,
  "typeName": null,
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: expected-stringify 1`] = `"Not Truthy"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: frees 1`] = `3`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: increments 1`] = `6`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report not truthy values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: actual 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": true,
  "keys": null,
  "negated": false,
  "nullable": true,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 4,
  "stack": "Has Stack Trace",
  "type": 1,
  "typeId": 9,
  "typeName": "Vec3",
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: actual-stringify 1`] = `"  class: <Vec3>null"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: decrements 1`] = `8`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: expected 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": true,
  "keys": null,
  "negated": true,
  "nullable": true,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 4,
  "stack": "Has Stack Trace",
  "type": 1,
  "typeId": 9,
  "typeName": "Vec3",
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: expected-stringify 1`] = `"  class: <Vec3>null"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: frees 1`] = `6`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: increments 1`] = `10`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report nulls[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": true,
  "size": 4,
  "stack": "Has Stack Trace",
  "type": 7,
  "typeId": 0,
  "typeName": "i32",
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: actual-stringify 1`] = `"  number: 0"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: decrements 1`] = `8`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": true,
  "size": 4,
  "stack": "Has Stack Trace",
  "type": 7,
  "typeId": 0,
  "typeName": "i32",
  "value": 42,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: expected-stringify 1`] = `"  number: 42"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: frees 1`] = `6`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report number values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": false,
  "keys": Array [
    ReflectedValue {
      "isManaged": true,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 1792,
      "signed": false,
      "size": 1,
      "stack": "",
      "type": 2,
      "typeId": 1,
      "typeName": "String",
      "value": "x",
      "values": null,
    },
    ReflectedValue {
      "isManaged": true,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 1824,
      "signed": false,
      "size": 1,
      "stack": "",
      "type": 2,
      "typeId": 1,
      "typeName": "String",
      "value": "y",
      "values": null,
    },
    ReflectedValue {
      "isManaged": true,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 1856,
      "signed": false,
      "size": 1,
      "stack": "",
      "type": 2,
      "typeId": 1,
      "typeName": "String",
      "value": "z",
      "values": null,
    },
  ],
  "negated": false,
  "nullable": false,
  "offset": 24,
  "pointer": 6976,
  "signed": false,
  "size": 24,
  "stack": "Has Stack Trace",
  "type": 1,
  "typeId": 9,
  "typeName": "Vec3",
  "value": 0,
  "values": Array [
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 1,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 2,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 3,
      "values": null,
    },
  ],
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: actual-stringify 1`] = `
"  class: Vec3 {
      string: x: number: 1.0,
      string: y: number: 2.0,
      string: z: number: 3.0
  }"
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: allocations 1`] = `16`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: decrements 1`] = `68`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": false,
  "keys": Array [
    ReflectedValue {
      "isManaged": true,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 1792,
      "signed": false,
      "size": 1,
      "stack": "",
      "type": 2,
      "typeId": 1,
      "typeName": "String",
      "value": "x",
      "values": null,
    },
    ReflectedValue {
      "isManaged": true,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 1824,
      "signed": false,
      "size": 1,
      "stack": "",
      "type": 2,
      "typeId": 1,
      "typeName": "String",
      "value": "y",
      "values": null,
    },
    ReflectedValue {
      "isManaged": true,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 1856,
      "signed": false,
      "size": 1,
      "stack": "",
      "type": 2,
      "typeId": 1,
      "typeName": "String",
      "value": "z",
      "values": null,
    },
  ],
  "negated": false,
  "nullable": false,
  "offset": 24,
  "pointer": 7056,
  "signed": false,
  "size": 24,
  "stack": "Has Stack Trace",
  "type": 1,
  "typeId": 9,
  "typeName": "Vec3",
  "value": 0,
  "values": Array [
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 4,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 5,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 6,
      "values": null,
    },
  ],
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: expected-stringify 1`] = `
"  class: Vec3 {
      string: x: number: 4.0,
      string: y: number: 5.0,
      string: z: number: 6.0
  }"
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: frees 1`] = `13`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: increments 1`] = `73`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report reference values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": true,
  "size": 4,
  "stack": "Has Stack Trace",
  "type": 7,
  "typeId": 0,
  "typeName": "i32",
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: actual-stringify 1`] = `"  number: 0"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: allocations 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: decrements 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 0,
  "stack": "No Stack Trace",
  "type": 13,
  "typeId": 0,
  "typeName": null,
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: expected-stringify 1`] = `"Truthy"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: frees 1`] = `3`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: increments 1`] = `5`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy expected values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 1,
  "stack": "Has Stack Trace",
  "type": 9,
  "typeId": 0,
  "typeName": "bool",
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: actual-stringify 1`] = `"  keyword: false"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: allocations 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: decrements 1`] = `4`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 0,
  "stack": "No Stack Trace",
  "type": 13,
  "typeId": 0,
  "typeName": null,
  "value": 0,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: expected-stringify 1`] = `"Truthy"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: frees 1`] = `3`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: increments 1`] = `5`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report truthy values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 7360,
  "signed": false,
  "size": 3,
  "stack": "Has Stack Trace",
  "type": 11,
  "typeId": 14,
  "typeName": "Float64Array",
  "value": 0,
  "values": Array [
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 1.1,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 2.2,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 3.3,
      "values": null,
    },
  ],
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: actual-stringify 1`] = `"  class: Float64Array [ number: 1.1, number: 2.2, number: 3.3 ]"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: allocations 1`] = `15`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: decrements 1`] = `38`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": true,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 7440,
  "signed": false,
  "size": 3,
  "stack": "Has Stack Trace",
  "type": 11,
  "typeId": 14,
  "typeName": "Float64Array",
  "value": 0,
  "values": Array [
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 4.4,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 5.5,
      "values": null,
    },
    ReflectedValue {
      "isManaged": false,
      "isNull": false,
      "keys": null,
      "negated": false,
      "nullable": false,
      "offset": 0,
      "pointer": 0,
      "signed": true,
      "size": 8,
      "stack": "",
      "type": 8,
      "typeId": 0,
      "typeName": "f64",
      "value": 6.6,
      "values": null,
    },
  ],
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: expected-stringify 1`] = `"  class: Float64Array [ number: 4.4, number: 5.5, number: 6.6 ]"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: frees 1`] = `10`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: increments 1`] = `45`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report typedarray values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: actual 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 4,
  "stack": "Has Stack Trace",
  "type": 7,
  "typeId": 0,
  "typeName": "u32",
  "value": 4294967294,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: actual-stringify 1`] = `"  number: 4294967294 keyword: as class: u32"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: decrements 1`] = `8`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: expected 1`] = `
ReflectedValue {
  "isManaged": false,
  "isNull": false,
  "keys": null,
  "negated": false,
  "nullable": false,
  "offset": 0,
  "pointer": 0,
  "signed": false,
  "size": 4,
  "stack": "Has Stack Trace",
  "type": 7,
  "typeId": 0,
  "typeName": "u32",
  "value": 4294967293,
  "values": null,
}
`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: expected-stringify 1`] = `"  number: 4294967293 keyword: as class: u32"`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: frees 1`] = `6`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: message 1`] = `""`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u32 values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: decrements 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: frees 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~should report u64 values[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: allocations 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: decrements 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: frees 1`] = `7`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: increments 1`] = `9`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: pass 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]!~this test should pass[0]: type 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]: afterAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]: afterEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]: allocations 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]: beforeAllPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]: beforeEachPointers 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]: decrements 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]: frees 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]: increments 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]: message 1`] = `null`;

exports[`pass-fail output Node: !~pass-fail[0]: pass 1`] = `false`;

exports[`pass-fail output Node: !~pass-fail[0]: ran 1`] = `true`;

exports[`pass-fail output Node: !~pass-fail[0]: reallocs 1`] = `0`;

exports[`pass-fail output Node: !~pass-fail[0]: type 1`] = `1`;

exports[`pass-fail output Overall Statistics: pass 1`] = `false`;
